name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: ap-south-1  # Mumbai region
  CLUSTER_NAME: sre-cluster
  TF_STATE_BUCKET: personio-aws-infra-statebucket  # Replace with your S3 bucket name
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: sre-app
  IMAGE_TAG: latest

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    ## Set up Go and install dependencies
    - name: Set up Go 1.19
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'

    - name: Set up Go Modules and Dependencies
      run: |
        cd app/src
        # Check if go.mod exists, if not create it
        if [ ! -f "go.mod" ]; then
          echo "Initializing Go module..."
          go mod init github.com/username/sre-app  # Replace with your project module name
        fi
        
        go mod tidy  # Automatically download dependencies

    # Build Docker Image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./app
    
    - name: Push Docker image to DockerHub
      run: |
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    # Set up Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Ensure that Terraform is run in the correct directory
    - name: Initialize Terraform
      run: |
        cd terraform  # Change to the directory containing your .tf files
        terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=terraform/state/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      id: tfplan
      run: |
        cd terraform  # Change to the directory containing your .tf files
        terraform plan -out=tfplan -var="grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > plan.txt
        cat plan.txt  # This ensures plan.txt is created and readable

    - name: Upload Terraform Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan  # Path to the terraform plan file
    
    - name: List Uploaded files
      run: ls -l ./terraform

    - name: Read Terraform Plan Output
      id: read_plan
      run: |
        echo "content<<EOF" >> $GITHUB_ENV
        cat terraform/plan.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

#    - name: Comment Terraform Plan on GitHub PR
#      uses: peter-evans/create-or-update-comment@v4
#      with:
#        token: ${{ secrets.GIT_TOKEN }}
#        issue-number: ${{ github.event.pull_request.number }}
#        body: |
#          **Terraform Plan Output**
#          ```
#          ${{ env.content }}
#          ```

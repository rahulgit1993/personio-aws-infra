name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: ap-south-1  # Mumbai region
  CLUSTER_NAME: personio-cluster
  TF_STATE_BUCKET: personio-aws-infra-statebucket  # Replace with your S3 bucket name
  PLAIN_FILE_KEY: terraform/tfplan
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: personio-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    ## Set up Go and install dependencies
    - name: Set up Go 1.19
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'

    - name: Set up Go Modules and Dependencies
      run: |
        cd app/src
        # Check if go.mod exists, if not create it
        if [ ! -f "go.mod" ]; then
          echo "Initializing Go module..."
          go mod init github.com/username/personio-app  # Replace with your project module name
        fi
        # Install Prometheus Go Client Dependency
        go mod tidy  # Automatically download dependencies

    # Build Docker Image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image with tags
      run: |
        docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./app
        docker tag ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Push Docker images to DockerHub
      run: |
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    # Set up Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Ensure that Terraform is run in the correct directory
    - name: Initialize Terraform
      run: |
        cd terraform  # Change to the directory containing your .tf files
        terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=terraform/state/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      id: tfplan
      run: |
        cd terraform  # Change to the directory containing your .tf files
        terraform plan -out=tfplan -var="DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" -var="IMAGE_TAG=${{ env.IMAGE_TAG }}"

    - name: Terraform Destroy Plan
      run: |
        cd terraform
        terraform init
        terraform plan -destroy -out=tfplan -var="DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" -var="IMAGE_TAG=${{ env.IMAGE_TAG }}"

    - name: Upload Terraform Plan to s3
      run: | 
        aws s3 cp terraform/tfplan s3://${{ env.TF_STATE_BUCKET }}/${{ env.PLAIN_FILE_KEY }}
